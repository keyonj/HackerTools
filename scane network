import scapy.all as scapy
import optparse
from colorama import Fore, Style, init
import pyfiglet
import threading
from tabulate import tabulate
import logging

init()
logging.basicConfig(level=logging.INFO)

def print_banner(text):
    ascii_banner = pyfiglet.figlet_format(text)
    print(f"{Fore.CYAN}{ascii_banner}{Style.RESET_ALL}")

def get_arguments():
    parser = optparse.OptionParser()
    parser.add_option("-r", "--range", dest="network_ip", help="Enter Range IP")
    parser.add_option("-p", "--ports", dest="ports", help="Enter Port Range (e.g., 20-80)")
    parser.add_option("-t", "--target", dest="target_ip", help="Enter Target IP to scan")
    parser.add_option("-s", "--fast", action="store_true", dest="fast_scan", default=False, help="Enable fast scan (scan first 20 ports only)")
    options, arguments = parser.parse_args()
    if not options.network_ip and not options.target_ip:
        parser.error(f"{Fore.RED}[-_-] Please Enter either Range IP or Target IP, Enter -h for Help{Style.RESET_ALL}")
    if not options.ports:
        parser.error(f"{Fore.RED}[-_-] Please Enter Port Range, Enter -h for Help{Style.RESET_ALL}")
    return options

def get_os_and_mac(ip):
    try:
        tcp_packet = scapy.IP(dst=ip) / scapy.TCP(dport=80, flags="S")
        response = scapy.sr1(tcp_packet, timeout=1, verbose=False)
        os_type = "Unknown OS"

        if response:
            ttl = response.ttl
            if ttl <= 64:
                os_type = "Linux"
            elif ttl <= 128:
                os_type = "Windows"

        arp_request = scapy.ARP(pdst=ip)
        broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
        arp_request_broadcast = broadcast / arp_request
        answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

        mac_address = "No response"
        if answered_list:
            mac_address = answered_list[0][1].hwsrc

        return os_type, mac_address
    except Exception as e:
        logging.error(f"Error getting OS and MAC for {ip}: {e}")
        return "Error", "Error"

def scan(network_ip):
    arp_request = scapy.ARP(pdst=network_ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    clients_list = []
    for element in answered_list:
        client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        clients_list.append(client_dict)
    return clients_list

def scan_port(ip, port, port_results):
    try:
        tcp_packet = scapy.IP(dst=ip) / scapy.TCP(dport=port, flags="S")
        response = scapy.sr1(tcp_packet, timeout=1, verbose=False)

        if response:
            if response.haslayer(scapy.TCP) and response[scapy.TCP].flags == "SA":
                port_results.append([port, "Open"])
            elif response.haslayer(scapy.TCP) and response[scapy.TCP].flags == "RA":
                port_results.append([port, "Closed"])
            else:
                port_results.append([port, "Filtered/No Response"])
        else:
            port_results.append([port, "No Response"])
    except Exception as e:
        logging.error(f"Error scanning port {port} on {ip}: {e}")

def scan_ports(ip, ports_input, fast_scan):
    if "-" in ports_input:
        start_port, end_port = map(int, ports_input.split("-"))
    else:
        start_port = end_port = int(ports_input)

    if fast_scan:
        end_port = min(start_port + 19, end_port)  

    logging.info(f"Scanning ports on {ip} from {start_port} to {end_port}...")
    port_results = []

    threads = []
    for port in range(start_port, end_port + 1):
        thread = threading.Thread(target=scan_port, args=(ip, port, port_results))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    print(f"\n{Fore.YELLOW}Port Scan Results for {ip}:{Style.RESET_ALL}")
    print(tabulate(port_results, headers=["Port", "Status"], tablefmt="pretty"))

def display_results(ip, ports_range, fast_scan):
    os_type, mac = get_os_and_mac(ip)
    results = [[ip, mac, os_type]]

    print(f"\n{Fore.YELLOW}IP Address\t\tMac Address\t\t\tOS{Style.RESET_ALL}")
    print(f"{Fore.CYAN}" + "-" * 63 + f"{Style.RESET_ALL}")
    print(tabulate(results, headers=["IP Address", "Mac Address", "OS"], tablefmt="pretty"))

    scan_ports(ip, ports_range, fast_scan)

print_banner("Keyo Scan")
options = get_arguments()

if options.target_ip:
    display_results(options.target_ip, options.ports, options.fast_scan)
else:
    client_list = scan(options.network_ip)
    for client in client_list:
        display_results(client["ip"], options.ports, options.fast_scan)




